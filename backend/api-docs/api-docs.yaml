openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/v1/users/{id}/avatar:
    get:
      tags:
      - rest-user-controller
      summary: Get logged user avatar
      operationId: getProfilePic
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Resource not found
          content: {}
        "200":
          description: Avatar returned successfully
          content:
            application/json:
              schema:
                type: string
                format: binary
    put:
      tags:
      - rest-user-controller
      summary: Modify avatar for logged user
      operationId: modifyAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
              - avatar
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Avatar modified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUserDTO"
        "403":
          description: You cannot modify an avatar for another user
    post:
      tags:
      - rest-user-controller
      summary: Upload avatar for logged user
      operationId: uploadAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
              - avatar
      responses:
        "404":
          description: Not Found
        "201":
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUserDTO"
        "409":
          description: Avatar already exists
        "403":
          description: You cannot upload an avatar for another user
    delete:
      tags:
      - rest-user-controller
      summary: Delete avatar for logged user
      operationId: deleteAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Avatar deleted successfully
          content:
            application/json:
              schema:
                type: string
        "403":
          description: You cannot delete an avatar for another user
  /api/v1/users/:
    get:
      tags:
      - rest-user-controller
      summary: Get all users Paginated
      operationId: getUsers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Users list returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
    post:
      tags:
      - rest-user-controller
      summary: Register new user
      operationId: registerNewUser
      parameters:
      - name: createUserRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "404":
          description: Not Found
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserDTO"
        "409":
          description: User already exists
        "500":
          description: Error creating user
  /api/v1/users:
    get:
      tags:
      - rest-user-controller
      summary: Get all users Paginated
      operationId: getUsers_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Users list returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
    post:
      tags:
      - rest-user-controller
      summary: Register new user
      operationId: registerNewUser_1
      parameters:
      - name: createUserRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "404":
          description: Not Found
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserDTO"
        "409":
          description: User already exists
        "500":
          description: Error creating user
  /api/v1/posts/{id}/comments:
    get:
      tags:
      - rest-comments-controller
      summary: Get all comments
      operationId: getComments
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "403":
          description: Post is private
        "500":
          description: Internal server error
    post:
      tags:
      - rest-comments-controller
      summary: Create a new comment
      operationId: createComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateCommentRequest"
      responses:
        "404":
          description: Post not found
          content: {}
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleCommentDTO"
        "500":
          description: Internal server error
  /api/v1/posts/{id}/comments/:
    get:
      tags:
      - rest-comments-controller
      summary: Get all comments
      operationId: getComments_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "403":
          description: Post is private
        "500":
          description: Internal server error
    post:
      tags:
      - rest-comments-controller
      summary: Create a new comment
      operationId: createComment_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateCommentRequest"
      responses:
        "404":
          description: Post not found
          content: {}
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleCommentDTO"
        "500":
          description: Internal server error
  /api/v1/posts/{id}/banner:
    get:
      tags:
      - rest-posts-controller
      summary: Get post banner
      operationId: getPostBanner
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post banner retrieved successfully
          content:
            application/json:
              schema:
                type: string
                format: binary
        "500":
          description: Failed to get post banner
    post:
      tags:
      - rest-posts-controller
      summary: Update post banner
      operationId: updatePostBanner
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                banner:
                  type: string
                  format: binary
              required:
              - banner
      responses:
        "404":
          description: Post not found
          content: {}
        "201":
          description: Post banner updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to update post banner
    delete:
      tags:
      - rest-posts-controller
      summary: Delete post banner
      operationId: deletePostBanner
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post banner deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to delete post banner
  /api/v1/posts/:
    get:
      tags:
      - rest-posts-controller
      summary: Get all posts paginated
      operationId: getPosts
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Failed to retrieve posts
    post:
      tags:
      - rest-posts-controller
      summary: Create a post
      operationId: createPost
      parameters:
      - name: createPostRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreatePostRequest"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                banner:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to create post
  /api/v1/posts:
    get:
      tags:
      - rest-posts-controller
      summary: Get all posts paginated
      operationId: getPosts_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Failed to retrieve posts
    post:
      tags:
      - rest-posts-controller
      summary: Create a post
      operationId: createPost_1
      parameters:
      - name: createPostRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreatePostRequest"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                banner:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to create post
  /api/v1/lists/{id}/product/{productId}:
    post:
      tags:
      - rest-shopping-list-controller
      summary: Add a product to a list
      operationId: addProductToList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: List not found
          content: {}
        "200":
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListDTO"
        "500":
          description: Internal server error
    delete:
      tags:
      - rest-shopping-list-controller
      summary: Remove a product from a list
      operationId: removeProductFromList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: List not found
          content: {}
        "200":
          description: Product removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleShoppingListDTO"
        "500":
          description: Internal server error
  /api/v1/lists:
    get:
      tags:
      - rest-shopping-list-controller
      summary: Get all lists
      operationId: getUserLists
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Lists retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
    post:
      tags:
      - rest-shopping-list-controller
      summary: Create a new list
      operationId: newList
      parameters:
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateListRequest"
      responses:
        "404":
          description: Not Found
        "200":
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleShoppingListDTO"
        "500":
          description: Internal server error
  /api/v1/lists/:
    get:
      tags:
      - rest-shopping-list-controller
      summary: Get all lists
      operationId: getUserLists_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "404":
          description: Not Found
        "200":
          description: Lists retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
    post:
      tags:
      - rest-shopping-list-controller
      summary: Create a new list
      operationId: newList_1
      parameters:
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateListRequest"
      responses:
        "404":
          description: Not Found
        "200":
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleShoppingListDTO"
        "500":
          description: Internal server error
  /api/auth/refresh:
    post:
      tags:
      - rest-login-controller
      operationId: refreshToken
      parameters:
      - name: RefreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/auth/logout:
    post:
      tags:
      - rest-login-controller
      operationId: logOut
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/auth/login:
    post:
      tags:
      - rest-login-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/users/{id}:
    get:
      tags:
      - rest-user-controller
      summary: Get user by id
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: User returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUserDTO"
    delete:
      tags:
      - rest-user-controller
      summary: Delete user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Error deleting user
    patch:
      tags:
      - rest-user-controller
      summary: Modify user
      operationId: modifyUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: modifyUser
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/ModifyUserRequest"
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: User modified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserDTO"
        "403":
          description: You cannot modify another user
        "500":
          description: Error modifying user
  /api/v1/users/{id}/password:
    patch:
      tags:
      - rest-user-controller
      summary: Modify user password
      operationId: modifyPassword
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: modifyUserPassword
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/ModifyPasswordRequest"
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Password modified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserDTO"
        "403":
          description: You cannot modify another user
        "500":
          description: Error modifying password
  /api/v1/posts/{id}:
    get:
      tags:
      - rest-posts-controller
      summary: Get a post by id
      operationId: getPost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to retrieve post
    delete:
      tags:
      - rest-posts-controller
      summary: Delete a post by id
      operationId: deletePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to delete post
    patch:
      tags:
      - rest-posts-controller
      summary: Update a post by id
      operationId: updatePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: createPostRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreatePostRequest"
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDTO"
        "500":
          description: Failed to update post
  /api/v1/posts/{id}/comments/{commentId}:
    get:
      tags:
      - rest-comments-controller
      summary: Get a comment
      operationId: getComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
          content: {}
        "200":
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleCommentDTO"
        "500":
          description: Internal server error
    delete:
      tags:
      - rest-comments-controller
      summary: Delete a comment
      operationId: deleteComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
          content: {}
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleCommentDTO"
        "500":
          description: Internal server error
    patch:
      tags:
      - rest-comments-controller
      summary: Update a comment
      operationId: updateComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateCommentRequest"
      responses:
        "404":
          description: Comment not found
          content: {}
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleCommentDTO"
        "500":
          description: Internal server error
  /api/v1/lists/{id}:
    get:
      tags:
      - rest-shopping-list-controller
      summary: Get a list
      operationId: getShoppingList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: List not found
          content: {}
        "200":
          description: List retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListDTO"
        "500":
          description: Internal server error
    delete:
      tags:
      - rest-shopping-list-controller
      summary: Remove a list
      operationId: removeList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: List not found
          content: {}
        "200":
          description: List removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListDTO"
        "500":
          description: Internal server error
    patch:
      tags:
      - rest-shopping-list-controller
      summary: Update a list
      operationId: updateList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: request
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CreateListRequest"
      responses:
        "404":
          description: List not found
          content: {}
        "200":
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListDTO"
        "500":
          description: Internal server error
  /api/v1/stats/users:
    get:
      tags:
      - rest-stats-controller
      summary: Get the stats of the users
      operationId: getUsersStats
      responses:
        "404":
          description: Not Found
        "200":
          description: Stats fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupermarketStatsDTO"
        "500":
          description: There was an error fetching the stats
  /api/v1/stats/products:
    get:
      tags:
      - rest-stats-controller
      summary: Get the stats of the products
      operationId: getProductsStats
      responses:
        "404":
          description: Not Found
        "200":
          description: Stats fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupermarketStatsDTO"
        "500":
          description: There was an error fetching the stats
  /api/v1/products/{id}:
    get:
      tags:
      - rest-products-controller
      summary: Get product by id
      operationId: getProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
        "200":
          description: Product fetched successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
  /api/v1/products/{id}/suggested:
    get:
      tags:
      - rest-products-controller
      summary: Suggest products
      operationId: suggestProducts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No products found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
        "200":
          description: Products suggested successfully
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
  /api/v1/products/{id}/compare:
    get:
      tags:
      - rest-products-controller
      summary: Compare products
      operationId: compareProducts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No products found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
        "200":
          description: Products compared successfully
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
  /api/v1/products/:
    get:
      tags:
      - rest-products-controller
      summary: Get products
      operationId: getProducts
      parameters:
      - name: searchProductRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/SearchProductRequest"
      responses:
        "404":
          description: Not Found
        "200":
          description: Products fetched successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
  /api/v1/products:
    get:
      tags:
      - rest-products-controller
      summary: Get products
      operationId: getProducts_1
      parameters:
      - name: searchProductRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/SearchProductRequest"
      responses:
        "404":
          description: Not Found
        "200":
          description: Products fetched successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaginatedDTO"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseDTO"
  /api/v1/posts/{id}/content:
    get:
      tags:
      - rest-posts-controller
      summary: Get post content
      operationId: getPostContent
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post not found
          content: {}
        "200":
          description: Post content retrieved successfully
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Failed to get post content
components:
  schemas:
    PublicUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    PrivateUserDTO:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
        id:
          type: integer
          format: int64
    CreateCommentRequest:
      type: object
      properties:
        content:
          type: string
    SimpleCommentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authorId:
          type: integer
          format: int64
        content:
          type: string
        formatedDate:
          type: string
        author:
          type: string
    PostDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        author:
          type: string
        date:
          type: string
        readingTime:
          type: string
        visibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        tags:
          type: array
          items:
            type: string
    CreatePostRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        content:
          type: string
        author:
          type: string
        date:
          type: string
        tags:
          type: array
          items:
            type: string
        visibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
    PriceDTO:
      type: object
      properties:
        total:
          type: number
          format: double
        per_reference_unit:
          type: number
          format: double
        reference_units:
          type: number
          format: double
        reference_unit_name:
          type: string
    ProductDTO:
      type: object
      properties:
        supermarket_name:
          type: string
        product_id:
          type: string
        product_url:
          type: string
        display_name:
          type: string
        normalized_name:
          type: string
        product_type:
          type: string
        product_categories:
          type: array
          items:
            type: string
        price:
          $ref: "#/components/schemas/PriceDTO"
        thumbnail:
          type: string
        brand:
          type: string
        keywords:
          type: array
          items:
            type: string
    ShoppingListDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        numberOfProducts:
          type: integer
          format: int32
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductDTO"
    CreateListRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    SimpleShoppingListDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ModifyUserRequest:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
    ModifyPasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        newPasswordConfirmation:
          type: string
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PaginatedDTO:
      type: object
      properties:
        page:
          type: array
          items:
            type: object
        current_page:
          type: integer
          format: int64
        total_pages:
          type: integer
          format: int64
        total_items:
          type: integer
          format: int64
        items_per_page:
          type: integer
          format: int64
        is_last_page:
          type: boolean
    SupermarketDTO:
      type: object
      properties:
        name:
          type: string
        count:
          type: integer
          format: int64
    SupermarketStatsDTO:
      type: object
      properties:
        stats:
          type: array
          items:
            $ref: "#/components/schemas/SupermarketDTO"
    ApiError:
      type: object
      properties:
        message:
          type: string
    ApiResponseDTO:
      type: object
      properties:
        data:
          type: object
        error:
          $ref: "#/components/schemas/ApiError"
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          properties:
            range:
              type: array
              items:
                $ref: "#/components/schemas/HttpRange"
            contentDisposition:
              $ref: "#/components/schemas/ContentDisposition"
            acceptCharset:
              type: array
              items:
                type: string
            etag:
              type: string
            location:
              type: string
              format: uri
            allow:
              type: array
              items:
                $ref: "#/components/schemas/HttpMethod"
              uniqueItems: true
            connection:
              type: array
              items:
                type: string
            ifModifiedSince:
              type: integer
              format: int64
            host:
              type: object
              properties:
                hostString:
                  type: string
                address:
                  type: object
                  properties:
                    hostAddress:
                      type: string
                    address:
                      type: string
                      format: byte
                    hostName:
                      type: string
                    linkLocalAddress:
                      type: boolean
                    anyLocalAddress:
                      type: boolean
                    multicastAddress:
                      type: boolean
                    loopbackAddress:
                      type: boolean
                    siteLocalAddress:
                      type: boolean
                    mcglobal:
                      type: boolean
                    mcnodeLocal:
                      type: boolean
                    mclinkLocal:
                      type: boolean
                    mcsiteLocal:
                      type: boolean
                    mcorgLocal:
                      type: boolean
                    canonicalHostName:
                      type: string
                port:
                  type: integer
                  format: int32
                unresolved:
                  type: boolean
                hostName:
                  type: string
            cacheControl:
              type: string
            contentLanguage:
              type: object
              properties:
                language:
                  type: string
                displayName:
                  type: string
                country:
                  type: string
                variant:
                  type: string
                script:
                  type: string
                unicodeLocaleAttributes:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                unicodeLocaleKeys:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                displayLanguage:
                  type: string
                displayScript:
                  type: string
                displayCountry:
                  type: string
                displayVariant:
                  type: string
                extensionKeys:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                iso3Language:
                  type: string
                iso3Country:
                  type: string
            contentType:
              $ref: "#/components/schemas/MediaType"
            contentLength:
              type: integer
              format: int64
            origin:
              type: string
            acceptPatch:
              type: array
              items:
                $ref: "#/components/schemas/MediaType"
            acceptLanguage:
              type: array
              items:
                type: object
                properties:
                  range:
                    type: string
                  weight:
                    type: number
                    format: double
            basicAuth:
              type: string
              writeOnly: true
            accept:
              type: array
              items:
                $ref: "#/components/schemas/MediaType"
            acceptLanguageAsLocales:
              type: array
              items:
                type: object
                properties:
                  language:
                    type: string
                  displayName:
                    type: string
                  country:
                    type: string
                  variant:
                    type: string
                  script:
                    type: string
                  unicodeLocaleAttributes:
                    type: array
                    items:
                      type: string
                    uniqueItems: true
                  unicodeLocaleKeys:
                    type: array
                    items:
                      type: string
                    uniqueItems: true
                  displayLanguage:
                    type: string
                  displayScript:
                    type: string
                  displayCountry:
                    type: string
                  displayVariant:
                    type: string
                  extensionKeys:
                    type: array
                    items:
                      type: string
                    uniqueItems: true
                  iso3Language:
                    type: string
                  iso3Country:
                    type: string
            accessControlAllowCredentials:
              type: boolean
            accessControlAllowHeaders:
              type: array
              items:
                type: string
            accessControlAllowMethods:
              type: array
              items:
                $ref: "#/components/schemas/HttpMethod"
            accessControlAllowOrigin:
              type: string
            accessControlExposeHeaders:
              type: array
              items:
                type: string
            accessControlMaxAge:
              type: integer
              format: int64
            accessControlRequestHeaders:
              type: array
              items:
                type: string
            accessControlRequestMethod:
              $ref: "#/components/schemas/HttpMethod"
            bearerAuth:
              type: string
              writeOnly: true
            expires:
              type: integer
              format: int64
            ifMatch:
              type: array
              items:
                type: string
            ifNoneMatch:
              type: array
              items:
                type: string
            ifUnmodifiedSince:
              type: integer
              format: int64
            pragma:
              type: string
            upgrade:
              type: string
            vary:
              type: array
              items:
                type: string
            empty:
              type: boolean
            all:
              type: object
              additionalProperties:
                type: string
              writeOnly: true
            lastModified:
              type: integer
              format: int64
            date:
              type: integer
              format: int64
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        filename:
          type: string
        charset:
          type: string
        size:
          type: integer
          format: int64
          deprecated: true
        creationDate:
          type: string
          format: date-time
          deprecated: true
        modificationDate:
          type: string
          format: date-time
          deprecated: true
        readDate:
          type: string
          format: date-time
          deprecated: true
        inline:
          type: boolean
        attachment:
          type: boolean
        formData:
          type: boolean
    HttpMethod:
      type: object
    HttpRange:
      type: object
    MediaType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        qualityValue:
          type: number
          format: double
        concrete:
          type: boolean
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
        subtypeSuffix:
          type: string
        charset:
          type: string
    SearchProductRequest:
      type: object
      properties:
        search:
          type: string
        supermarket:
          type: string
        keywords:
          type: string
        minPrice:
          type: number
          format: double
        maxPrice:
          type: number
          format: double
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
